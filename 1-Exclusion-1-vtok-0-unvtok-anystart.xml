<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int n = 5; // Number of tasks (nodes)
const int k = 1; // Number of tokens for k-exclusion

chan request[n];
urgent chan granted[n];
urgent chan token;
chan message[n][n];  //message[i][j], means send message from i to j.

int[0,n] nb[n][2] = {{4,1},{0,2},{1,3},{2,4},{3,0}}; // Neighbors of node i, nb[i][0] = prev, nb[i][1] = next
int count = 0; // Number of nodes in CS

// Data struct to hold the state of each node.
struct{
    int[0,1] requesting;     // Requesting to enter CS
    int[0,k] numTokens;      // Number of tokens held
    int[0,1] inCS;           // In critical section (must hold at least one token)
    int[0,n] tokenV;         // the value of token
} S[n] = {{0,0,0,0},{0,0,0,1},{0,0,0,2},{0,1,0,3},{0,0,0,4}};

// update the state of each node to check whether hold the token, if yes, numTokens ++.
void updateState(int[0,n] id)
{
    if(id == 0)
    {
        if(S[id].tokenV == S[nb[id][0]].tokenV)
        {
            S[id].tokenV = (S[id].tokenV + 1) % n;
            if(S[id].numTokens &lt; k)
                S[id].numTokens++;
        }
    }
    else
    {
        if(S[id].tokenV != S[nb[id][0]].tokenV)
        {
            S[id].tokenV = S[nb[id][0]].tokenV;
            if(S[id].numTokens &lt; k)
                S[id].numTokens++;
        }
    }
   
}

</declaration>
	<template>
		<name x="5" y="5">Node</name>
		<parameter>const int id</parameter>
		<declaration>clock c;

// Pass token
void passToken(int[0,n] i)
{
    S[i].numTokens--;
    S[nb[i][1]].numTokens++;
}

</declaration>
		<location id="id0" x="-536" y="-42">
			<name x="-561" y="-25">CS</name>
			<label kind="invariant" x="-510" y="-51">c&lt;=10</label>
		</location>
		<location id="id1" x="-205" y="-34">
			<name x="-229" y="-17">NonCS</name>
		</location>
		<location id="id2" x="-178" y="102">
			<committed/>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-331" y="102">message[nb[id][0]][id]?</label>
			<label kind="assignment" x="-331" y="119">updateState(id)</label>
			<nail x="-263" y="102"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-119" y="93">id == 0 &amp;&amp; 
S[id].numTokens == 0</label>
			<label kind="synchronisation" x="-119" y="127">message[id][nb[id][1]]!</label>
			<nail x="-110" y="102"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-229" y="34">id != 0 ||
(id == 0 &amp;&amp; S[id].numTokens == 1)</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-144" y="-34">S[id].requesting==0</label>
			<label kind="assignment" x="-144" y="-17">S[id].requesting=1</label>
			<nail x="-153" y="-34"/>
			<nail x="-153" y="17"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-450" y="-119">S[id].numTokens&gt;1</label>
			<label kind="synchronisation" x="-450" y="-102">message[id][nb[id][1]]!</label>
			<label kind="assignment" x="-450" y="-85">S[id].numTokens--</label>
			<nail x="-459" y="-119"/>
			<nail x="-459" y="-76"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-110" y="-161">S[id].numTokens ==1 &amp;&amp;
S[id].requesting==0</label>
			<label kind="synchronisation" x="-110" y="-119">message[id][nb[id][1]]!</label>
			<label kind="assignment" x="-110" y="-102">S[id].numTokens--</label>
			<nail x="-120" y="-110"/>
			<nail x="-120" y="-164"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-442" y="-17">S[id].requesting==1 &amp;&amp;
S[id].numTokens ==1</label>
			<label kind="assignment" x="-442" y="25">count++,
S[id].inCS=1,
S[id].requesting=0,
c=0</label>
			<nail x="-273" y="26"/>
			<nail x="-468" y="26"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-425" y="-263">c==10</label>
			<label kind="synchronisation" x="-425" y="-246">message[id][nb[id][1]]!</label>
			<label kind="assignment" x="-425" y="-229">S[id].numTokens--,
count--,
S[id].inCS=0</label>
			<nail x="-536" y="-229"/>
			<nail x="-205" y="-229"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
N0 = Node(0);
N1 = Node(1);
N2 = Node(2);
N3 = Node(3);
N4 = Node(4);


// List one or more processes to be composed into a system.
system N0,N1,N2,N3,N4;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; (N2.CS &amp;&amp; N1.CS)</formula>
			<comment>there is no two nodes in CS at the same time.</comment>
		</query>
		<query>
			<formula>A[] (count &lt;= k)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (not deadlock)</formula>
			<comment>will not deadlock</comment>
		</query>
	</queries>
</nta>
