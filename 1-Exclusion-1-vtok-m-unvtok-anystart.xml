<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int n = 5; // Number of tasks (nodes)
const int k = 1; // Number of tokens for k-exclusion

chan request[n];
urgent chan granted[n];
urgent chan token;
chan message[n][n];  //message[i][j], means send message from i to j.


int[0,n] nb[n][2] = {{4,1},{0,2},{1,3},{2,4},{3,0}};         // 5 nodes. Neighbors of node i, nb[i][0] = prev, nb[i][1] = next
//int[0,n] nb[n][2] = {{3,1},{0,2},{1,3},{2,0}};               // 4 nodes. Neighbors of node i, nb[i][0] = prev, nb[i][1] = next
//int[0,n] nb[n][2] = {{5,1},{0,2},{1,3},{2,4},{3,5},{4,0}};     // 6 nodes. Neighbors of node i, nb[i][0] = prev, nb[i][1] = next

int count = 0; // Number of nodes in CS
clock gc;
int countM = 0; // number of message sends out before the node is ready..


// Data struct to hold the state of each node.
struct{
    int[0,1] requesting;     // Requesting to enter CS
    int[0,k] numTokens;      // Number of tokens held
    int[0,1] inCS;           // In critical section (must hold at least one token)
    int[0,n] tokenV;         // the value of token
    bool valid;              // whether the token is valid, we set the first token seen by node 0 is valid.
    bool ready;              // the whole ring is ready to allow some node enter into CS.
    int[0,1] seen;           // mark whether has seen a token before. 0 for not, 1 for yes; only used for basenode, here is node 0.
}  S[n] = {{0,0,0,0,0,0,0},{0,1,0,1,0,0,0},{0,1,0,2,0,0,0},{0,1,0,3,0,0,0},{0,0,0,4,0,0,0}};        //5 nodes

// S[n] = {{0,0,0,0,0,0,0},{0,1,0,1,0,0,0},{0,1,0,2,0,0,0},{0,1,0,3,0,0,0}};        // 4 nodes



// update the state of each node to check whether hold the token, if yes, numTokens ++.
void updateState(int[0,n] id)
{
    if(id == 0)
    {
        if(S[id].tokenV == S[nb[id][0]].tokenV)
        {
            S[id].tokenV = (S[id].tokenV + 1) % n;
            S[id].valid = S[nb[id][0]].valid;
            S[id].ready = 1;
            gc = 0;
            if(S[id].numTokens &lt; k)
                S[id].numTokens++;
        }
        else
        {
            if(S[id].seen == 0)
            {
                S[id].seen = 1;
               // S[id].tokenV = S[nb[id][0]].tokenV; 
                S[id].valid = 1;
                if(S[id].numTokens &lt; k)
                    S[id].numTokens++;
            }
        }
    }
    else
    {
        if(S[id].tokenV != S[nb[id][0]].tokenV  ||S[id].valid == 0)
        {
            S[id].tokenV = S[nb[id][0]].tokenV;
            S[id].valid = S[nb[id][0]].valid;
            S[id].ready = S[nb[id][0]].ready;
            if(S[id].numTokens &lt; k)
                S[id].numTokens++;
        }
    }  
}


void updateCountM()
{
    if(countM &lt; 20)
        countM ++;
}

</declaration>
	<template>
		<name x="5" y="5">Node</name>
		<parameter>const int id</parameter>
		<declaration>clock c;


</declaration>
		<location id="id0" x="-536" y="-42">
			<name x="-561" y="-25">CS</name>
		</location>
		<location id="id1" x="-204" y="-34">
			<name x="-221" y="0">NonCS</name>
			<label kind="invariant" x="-212" y="-17">c &lt;= 5</label>
		</location>
		<location id="id2" x="-178" y="102">
			<committed/>
		</location>
		<location id="id3" x="-374" y="-127">
			<committed/>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-467" y="-76">id != 0  ||
(id == 0 &amp;&amp; S[id].numTokens == 0)</label>
			<nail x="-365" y="-51"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-680" y="-85">message[nb[id][0]][id]?</label>
			<label kind="assignment" x="-680" y="-68">updateState(id),
updateCountM()</label>
			<nail x="-620" y="-42"/>
			<nail x="-620" y="-8"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-58" y="-144">S[id].numTokens ==1</label>
			<label kind="synchronisation" x="-58" y="-127">message[id][nb[id][1]]!</label>
			<label kind="assignment" x="-58" y="-110">S[id].numTokens--</label>
			<nail x="-67" y="-136"/>
			<nail x="-67" y="-85"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-331" y="-144">id == 0 &amp;&amp;
S[id].numTokens == 1</label>
			<label kind="assignment" x="-331" y="-102">S[id].valid = 1,
S[id].seen = 1</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-331" y="102">message[nb[id][0]][id]?</label>
			<label kind="assignment" x="-331" y="119">updateState(id),
c = 0,
updateCountM()</label>
			<nail x="-263" y="102"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-119" y="93">id == 0 &amp;&amp; 
S[id].numTokens == 0</label>
			<label kind="synchronisation" x="-119" y="127">message[id][nb[id][1]]!</label>
			<nail x="-110" y="102"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-229" y="34">id != 0 ||
(id == 0 &amp;&amp; S[id].numTokens == 1)</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-143" y="-34">S[id].requesting==0</label>
			<label kind="assignment" x="-143" y="-17">S[id].requesting=1</label>
			<nail x="-152" y="-34"/>
			<nail x="-152" y="17"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-476" y="-8">S[id].requesting==1 &amp;&amp;
S[id].numTokens ==1 &amp;&amp;
S[id].valid == 1 &amp;&amp;
S[id].ready == 1</label>
			<label kind="assignment" x="-476" y="68">count++,
S[id].inCS=1,
S[id].requesting=0,
c=0</label>
			<nail x="-273" y="26"/>
			<nail x="-468" y="26"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-425" y="-246">message[id][nb[id][1]]!</label>
			<label kind="assignment" x="-425" y="-229">S[id].numTokens--,
count--,
S[id].inCS=0,
c = 0</label>
			<nail x="-536" y="-229"/>
			<nail x="-205" y="-229"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
N0 = Node(0);
N1 = Node(1);
N2 = Node(2);
N3 = Node(3);
N4 = Node(4);
//N5 = Node(5);
//Obs0 = Observer(0);
//Obs1 = Observer(1);
//Obs2 = Observer(2);
//Obs3 = Observer(3);
//Obs4 = Observer(4);

// List one or more processes to be composed into a system.
system N0,N1,N2,N3,N4; //,N4,N5;//N4,Obs0,Obs1,Obs2,Obs3,Obs4;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; (N2.CS &amp;&amp; N1.CS)</formula>
			<comment>there is no two nodes in CS at the same time.</comment>
		</query>
		<query>
			<formula>A[] (count &lt;= k)</formula>
			<comment>always there is only one node in CS.</comment>
		</query>
		<query>
			<formula>A[] (countM &gt; 15 imply S[0].ready)</formula>
			<comment>the worst case: to satisfy the base node's ready, requires m + n + iv pieces of messages, with m is the sum of distance from each node,which hold a token initialized, to the basenode; iv is the number of invalid token.</comment>
		</query>
		<query>
			<formula>A[] (countM &gt; 14 imply S[0].ready)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (S[0].ready imply countM &gt; 6)</formula>
			<comment>the best case: to satisfy the base node's ready, requires at least n + m pieces of messages, with m is distance between the basenode and the nearest node holds a token.</comment>
		</query>
		<query>
			<formula>A[] (S[0].ready imply countM &gt; 7)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (S[0].ready imply gc &lt; 10)</formula>
			<comment>2 time units (here is 5), that is, 2 * 5.</comment>
		</query>
		<query>
			<formula>A[] (gc &gt; 15 imply S[0].ready)</formula>
			<comment>the best case: to satisfy the basenode's ready, require more than 3 time units(here is 5), that is, more than 3 * 5.</comment>
		</query>
		<query>
			<formula>A[] (gc &gt; 14 imply S[0].ready)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (not deadlock)</formula>
			<comment>will not deadlock</comment>
		</query>
	</queries>
</nta>
