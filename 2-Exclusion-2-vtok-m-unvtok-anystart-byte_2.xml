<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int n = 5; // Number of tasks (nodes)
const int k = 2; // Number of tokens for k-exclusion

chan request[n];
urgent chan granted[n];
urgent chan token;
chan message[n][n];  //message[i][j], means send message from i to j.
int testV = 0;

int[0,n] nb[n][2] = {{4,1},{0,2},{1,3},{2,4},{3,0}};         // 5 nodes. Neighbors of node i, nb[i][0] = prev, nb[i][1] = next
//int[0,n] nb[n][2] = {{3,1},{0,2},{1,3},{2,0}};               // 4 nodes. Neighbors of node i, nb[i][0] = prev, nb[i][1] = next
//int[0,n] nb[n][2] = {{5,1},{0,2},{1,3},{2,4},{3,5},{4,0}};     // 6 nodes. Neighbors of node i, nb[i][0] = prev, nb[i][1] = next

int count = 0; // Number of nodes in CS
clock gc;
int countM = 0; // number of message sends out before the node is ready..

// Data struct to hold the state of each node.
struct{
    int[0,1] requesting;     // Requesting to enter CS
    int[0,k] numTokens;      // Number of tokens held
    int[0,1] inCS;           // In critical section (must hold at least one token)
    int[0,1] tokenV[n+1];         // the value of token    
    bool valid;              // whether the token is valid, we set the first token seen by node 0 is valid.
    bool ready;              // the whole ring is ready to allow some node enter into CS.
    int[0,n] seen;           // mark whether has seen a token before. 0 for not, 1 for yes; only used for basenode, here is node 0.
}  S[n] = {{0,0,0,{0,0,0,0,0,0},0,0,0},
           {0,1,0,{0,0,1,0,0,1},0,0,0},
           {0,1,0,{0,1,0,0,1,0},0,0,0},
           {0,1,0,{0,1,1,0,1,1},0,0,0},
           {0,0,0,{1,0,0,1,0,0},0,0,0}};        //5 nodes

// S[n] = {{0,0,0,0,0,0,0},{0,1,0,1,0,0,0},{0,1,0,2,0,0,0},{0,1,0,3,0,0,0}};        // 4 nodes

// add one in the left part
void addLeftOne(int id)
{
    
    if(S[id].tokenV[0] == 1 &amp;&amp; S[id].tokenV[1]== 0 &amp;&amp; S[id].tokenV[2] == 0)
        S[id].tokenV[0] = S[id].tokenV[1] = S[id].tokenV[2] = 0;
    else{
        int found = 0;
        int i;
        for(i = 2; i &gt;= 0; i--){
            if(found == 0){
                if(S[id].tokenV[i] == 1)
                    S[id].tokenV[i] = 0;
                else{
                    S[id].tokenV[i] = 1;
                    found = 1;
                } 
            }          
        }
    }
}

// add one in the right part
void addRightOne(int id)
{
    if(S[id].tokenV[3] == 1 &amp;&amp; S[id].tokenV[4]== 0 &amp;&amp; S[id].tokenV[5] == 0)
        S[id].tokenV[3] = S[id].tokenV[4] = S[id].tokenV[5] = 0;
    else{
        int found = 0;
        int i;
        for(i = n; i &gt;= 3; i--){
            if(found == 0){
                if(S[id].tokenV[i] == 1)
                    S[id].tokenV[i] = 0;
                else{
                    S[id].tokenV[i] = 1;
                    found = 1;
                } 
            }          
        }
    }
}

// update the value of left of the token 
void updateLeftV(int id1, int id2)
{
    int i;
    for(i = 0; i &lt; 3; i++){
        S[id1].tokenV[i] = S[id2].tokenV[i];
    }
}

// update the value of right of the token 
void updateRightV(int id1, int id2)
{
    int i;
    for(i = 3; i &lt;= n; i++){
        S[id1].tokenV[i] = S[id2].tokenV[i];
    }
}


// check whether left part is the same
bool checkLeftSame(int id1, int id2)
{
    int i;
    for(i = 0; i &lt; 3; i++){
        if(S[id1].tokenV[i] != S[id2].tokenV[i])
            return false;
    }
    return true;
}

// check whether right part is the same
bool checkRightSame(int id1, int id2)
{
    int i;
    for(i = 3; i &lt;= n; i++){
        if(S[id1].tokenV[i] != S[id2].tokenV[i])
            return false;
    }
    return true;
}


// update the state of each node to check whether hold the token, if yes, numTokens ++.
void updateState(int[0,n] id)
{

    if(id == 0)
    {
        if(checkLeftSame(id ,nb[id][0]))
        {                     
            addLeftOne(id);
            S[id].valid = S[nb[id][0]].valid;
            if(S[id].seen &lt;= k  )
                S[id].seen ++;
            if(S[id].seen == 2)
            {
                S[id].ready = 1;
                gc = 0;
            }         
            if(S[id].numTokens &lt; k)
                S[id].numTokens++;            
        }
        else if(checkRightSame(id ,nb[id][0]))
        {
            addRightOne(id);
            S[id].valid = S[nb[id][0]].valid;
            if(S[id].seen &lt;= k  )
                S[id].seen ++;
            if(S[id].seen == 2)
            {
                S[id].ready = 1;
                gc = 0;
            }         
            if(S[id].numTokens &lt; k)
                S[id].numTokens++;
        }       
        else
        {
            if(S[id].seen &lt;=k )
                S[id].seen ++;
            S[id].valid = 1;
            if(S[id].seen == k)
            {
                S[id].ready = 1;
                gc = 0;
            }              
        }
    }
    else
    {
        if(!checkLeftSame(id ,nb[id][0]))
        {                                 
            if((S[nb[id][0]].valid == 0 &amp;&amp; S[id].valid == 0) ||
               (S[nb[id][0]].valid == 1 &amp;&amp; S[id].numTokens == 0) ||
               (S[nb[id][0]].valid == 1 &amp;&amp; S[id].numTokens == 1 &amp;&amp; S[id].valid == 1) )
            {
                if(S[id].numTokens  &lt; k)
                    S[id].numTokens++;
            }    
            else if(S[nb[id][0]].valid == 1 &amp;&amp; S[id].numTokens &gt; 1)
                 S[id].numTokens = 1;    
            updateLeftV(id, nb[id][0]);                                             
            S[id].valid = S[nb[id][0]].valid;
            S[id].ready = S[nb[id][0]].ready;            
        }
        else if(!checkRightSame(id ,nb[id][0]))
        {
            if((S[nb[id][0]].valid == 0 &amp;&amp; S[id].valid == 0) ||
               (S[nb[id][0]].valid == 1 &amp;&amp; S[id].numTokens == 0) ||
               (S[nb[id][0]].valid == 1 &amp;&amp; S[id].numTokens == 1 &amp;&amp; S[id].valid == 1) )
            {
                if(S[id].numTokens  &lt; k)
                    S[id].numTokens++;
            } 
            else if(S[nb[id][0]].valid == 1 &amp;&amp; S[id].numTokens &gt; 1)
                 S[id].numTokens = 1;
            updateRightV(id, nb[id][0]);       
            S[id].valid = S[nb[id][0]].valid;
            S[id].ready = S[nb[id][0]].ready;           
        }
    }  
}

void updateCountM()
{
    if(countM &lt; 20)
        countM ++;
}


</declaration>
	<template>
		<name x="5" y="5">Node</name>
		<parameter>const int id</parameter>
		<declaration>clock c;


</declaration>
		<location id="id0" x="-536" y="-42">
			<name x="-561" y="-25">CS</name>
		</location>
		<location id="id1" x="-204" y="-34">
			<name x="-212" y="0">NonCS</name>
			<label kind="invariant" x="-214" y="-17">c &lt; 5</label>
		</location>
		<location id="id2" x="-178" y="102">
			<committed/>
		</location>
		<location id="id3" x="-374" y="-127">
			<committed/>
		</location>
		<location id="id4" x="25" y="102">
			<committed/>
		</location>
		<location id="id5" x="25" y="42">
			<committed/>
		</location>
		<location id="id6" x="25" y="-17">
			<committed/>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="guard" x="-136" y="0">S[id].numTokens == 0</label>
			<nail x="-85" y="17"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="guard" x="-136" y="-51">S[id].numTokens == 1</label>
			<label kind="assignment" x="-127" y="-34">S[id].numTokens --</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="25" y="-5">message[id][nb[id][1]]!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="34" y="68">message[id][nb[id][1]]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-136" y="110">id == 0 &amp;&amp; 
S[id].ready == 1 &amp;&amp;
S[id].seen == k</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-467" y="-76">id != 0  ||
(id == 0 &amp;&amp; S[id].numTokens == 0)</label>
			<nail x="-365" y="-51"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-680" y="-85">message[nb[id][0]][id]?</label>
			<label kind="assignment" x="-680" y="-68">updateState(id),
updateCountM()</label>
			<nail x="-620" y="-42"/>
			<nail x="-620" y="-8"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-127" y="-221">S[id].numTokens &gt;= 1  &amp;&amp;
((id == 0 &amp;&amp; S[id].ready == 1) ||
  (id != 0))</label>
			<label kind="synchronisation" x="-119" y="-170">message[id][nb[id][1]]!</label>
			<label kind="assignment" x="-119" y="-153">S[id].numTokens--</label>
			<nail x="-127" y="-127"/>
			<nail x="-127" y="-178"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-331" y="-144">id == 0 &amp;&amp;
S[id].numTokens == 1</label>
			<label kind="assignment" x="-331" y="-102">S[id].valid = 1,
S[id].seen = 1</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-331" y="102">message[nb[id][0]][id]?</label>
			<label kind="assignment" x="-331" y="119">updateState(id),
c = 0,
updateCountM()</label>
			<nail x="-263" y="102"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-221" y="17">id != 0 ||
S[id].ready == 0 ||
S[id].seen != k</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-118" y="-111">S[id].requesting==0</label>
			<label kind="assignment" x="-118" y="-85">S[id].requesting=1</label>
			<nail x="-127" y="-60"/>
			<nail x="-127" y="-102"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-476" y="-8">S[id].requesting==1 &amp;&amp;
S[id].numTokens &gt;=1 &amp;&amp;
S[id].valid == 1 &amp;&amp;
S[id].ready == 1</label>
			<label kind="assignment" x="-476" y="68">count++,
S[id].inCS=1,
S[id].requesting=0,
c=0</label>
			<nail x="-273" y="26"/>
			<nail x="-468" y="26"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-425" y="-246">message[id][nb[id][1]]!</label>
			<label kind="assignment" x="-425" y="-229">S[id].numTokens--,
count--,
S[id].inCS=0,
c = 0</label>
			<nail x="-536" y="-229"/>
			<nail x="-205" y="-229"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
N0 = Node(0);
N1 = Node(1);
N2 = Node(2);
N3 = Node(3);
N4 = Node(4);
//N5 = Node(5);
//Obs0 = Observer(0);
//Obs1 = Observer(1);
//Obs2 = Observer(2);
//Obs3 = Observer(3);
//Obs4 = Observer(4);

// List one or more processes to be composed into a system.
system N0,N1,N2,N3,N4; //,N4,N5;//N4,Obs0,Obs1,Obs2,Obs3,Obs4;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; (N2.CS &amp;&amp; N1.CS)</formula>
			<comment>there is no two nodes in CS at the same time.</comment>
		</query>
		<query>
			<formula>A[] (count &lt;= 1)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (count &lt;= k)</formula>
			<comment>always there is only one node in CS.</comment>
		</query>
		<query>
			<formula>A[] (S[0].ready imply countM &gt; 4)
</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (countM &gt; 6 imply S[0].ready)
</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (not deadlock)</formula>
			<comment>will not deadlock</comment>
		</query>
	</queries>
</nta>
